/*
 * Copyright 2012-2019 CodeLibs Project and the Others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
package org.codelibs.fione.h2o.bindings.pojos;

import java.util.Map;

import com.google.gson.GsonBuilder;
import com.google.gson.annotations.SerializedName;

public class GridSearchSchema extends SchemaV3 {

    /**
     * Basic model builder parameters.
     */
    public ModelParametersSchemaV3 parameters;

    /**
     * Grid search parameters.
     */
    @SerializedName("hyper_parameters")
    public Map<Object, Object> hyperParameters;

    /**
     * Destination id for this grid; auto-generated if not specified.
     */
    @SerializedName("grid_id")
    public GridKeyV3 gridId;

    /**
     * Hyperparameter search criteria, including strategy and early stopping directives.  If it is not given, exhaustive
     * Cartesian is used.
     */
    @SerializedName("search_criteria")
    public HyperSpaceSearchCriteriaV99 searchCriteria;

    /**
     * Level of parallelism during grid model building. 1 = sequential building (default). 0 for adaptive
     * parallelism.Any number > 1 sets the exact number of models built in parallel.
     */
    public int parallelism;

    /**
     * Number of all models generated by grid search.
     */
    @SerializedName("total_models")
    public int totalModels;

    /**
     * Job Key.
     */
    public JobV3 job;

    /**
     * Public constructor
     */
    public GridSearchSchema() {
        parallelism = 0;
        totalModels = 0;
    }

    /**
     * Return the contents of this object as a JSON String.
     */
    @Override
    public String toString() {
        return new GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(this);
    }

}
